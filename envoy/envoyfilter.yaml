apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: jwt-example
  namespace: test
spec:
  workloadSelector:
    labels:
      app.kubernetes.io/name: CHANGE_ME_WORKLOAD-------------------------
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
    patch:
      operation: INSERT_BEFORE
      value: # lua filter specification
       name: envoy.filters.http.lua
       typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            -- character table string for encoding
            local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
            -- encoding
            function enc(data)
                return ((data:gsub('.', function(x) 
                    local r,b='',x:byte()
                    for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
                    return r;
                end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
                    if (#x < 6) then return '' end
                    local c=0
                    for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
                    return b:sub(c+1,c+1)
                end)..({ '', '==', '=' })[#data%3+1])
            end

            -- return json string
            function log(handle, user, message)
              return [[{"type":"audit_log]]..
                [[","timestamp":"]] ..handle:timestamp()..
                [[","request-id":"]] ..handle:headers():get("x-request-id")..
                [[","authority":"]] ..handle:headers():get(":authority")..
                [[","method":"]] ..handle:headers():get(":method")..
                [[","path":"]] ..handle:headers():get(":path")..
                [[","scheme":"]] ..handle:headers():get(":scheme")..
                [[","user":"]] ..user..
                [[","body":"]] ..message.. [["}]]
            end
            
            function envoy_on_request(request_handle)
              local user
              local meta = request_handle:streamInfo():dynamicMetadata()
              for key, value in pairs(meta) do
                user = value.jwt_payload.iss
                request_handle:headers():add("jwt-extracted-user", user)
              end
              local requestId = request_handle:headers():get("x-request-id")
              local chunks = 0
              for chunk in request_handle:bodyChunks() do
                chunks = chunks + 1
                if chunk:length() > 0 then
                  local body_bytes = chunk:getBytes(0, chunk:length())
                  local enc_body = enc(tostring(body_bytes))
                  print(log(request_handle, user, enc_body))
                end
              end
              -- no body in request
              if chunks == 0 then
                print(log(request_handle, user, ""))
              end
            end
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
    patch:
      operation: INSERT_BEFORE
      value: # lua filter specification
       name: envoy.filters.http.jwt_authn
       typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
          providers:
            jwt_auth:
              remote_jwks:
                http_uri:
                  uri: https://CHANGE_ME_DOMAIN-------------------------/.well-known/jwks.json
                  cluster: identity_provider
                  timeout: 2s
              payload_in_metadata: jwt_payload
          rules:
          - match:
              prefix: "/healthz"
          - match:
              prefix: "/readyz"
          - match:
              prefix: "/"
            requires:
              provider_name: jwt_auth
  # The second patch adds the cluster that is referenced by the lua code
  # cds match is omitted as a new cluster is being added
  - applyTo: CLUSTER
    match:
      context: SIDECAR_OUTBOUND
    patch:
      operation: ADD
      value: # cluster specification
        name: identity_provider
        type: LOGICAL_DNS
        dns_lookup_family: V4_ONLY
        load_assignment:
          cluster_name: identity_provider
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: CHANGE_ME_DOMAIN-------------------------
                    port_value: 443
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            sni: CHANGE_ME_DOMAIN-------------------------
            common_tls_context:
              validation_context:
                trusted_ca:
                  filename: /etc/ssl/certs/ca-certificates.crt